# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-docker-image:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up application.yml
        run: |
          cd ./src/main/resources
          touch ./S3.yml
          echo "${{ secrets.S3 }}" > ./S3.yml
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
          touch ./application-dev.yml
          echo "${{ secrets.APPLICATION_DEV }}" > ./application-dev.yml
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_LOCAL }}" > ./application-local.yml

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5
        with:
          arguments: clean bootJar

      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/odiga-develop-was .

      - name: docker hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: docker hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/odiga-develop-was

      - name: deploy on AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
                    sudo docker rm -f odiga-develop-was
                    sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/odiga-develop-was
                    sudo docker run -d -p 8080:8080 \
                    --name odiga-develop-was \
                    ${{ secrets.DOCKERHUB_USERNAME }}/odiga-develop-was